package pac_man;//package pac_man;
import javax.sound.sampled.*;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class SoundManager implements Runnable {
    private static SoundManager instance;
    private final Map<SoundType, String> soundPaths;
    private final Map<SoundType, Clip> clips;
    private final ExecutorService soundExecutor;
    private float volume = 1.0f;
    private boolean isMuted = false;


    public static String fullPath(String p) {
        return "C:\\Users\\i0548\\Downloads\\Pack-Man\\sound\\" + p + ".wav"; // ודא שהנתיב נכון
    }

    // סוגי הסאונדים במשחק
    public enum SoundType {
        DOT_EAT,
//        POWER_UP,
//        DEATH,
//        GAME_START,
//        GHOST_EAT,
//        SIREN
    }

    private SoundManager() {
        soundPaths = new HashMap<>();
        clips = new HashMap<>();
        soundExecutor = Executors.newFixedThreadPool(3); // מאפשר 3 סאונדים במקביל

        // הגדרת נתיבי הקבצים
        initializeSoundPaths();
    }

    private void initializeSoundPaths() {
        // יש להחליף את הנתיבים בהתאם למיקום הקבצים בפרויקט שלך
        soundPaths.put(SoundType.DOT_EAT, fullPath("pacman_eating3"));
//        soundPaths.put(SoundType.POWER_UP, "sounds/power_up.wav");
//        soundPaths.put(SoundType.DEATH, "sounds/death.wav");
//        soundPaths.put(SoundType.GAME_START, fullPath("start_game"));
//        soundPaths.put(SoundType.GHOST_EAT, fullPath("pacman_eat2"));
//        soundPaths.put(SoundType.SIREN, "sounds/siren.wav");
    }

    public static SoundManager getInstance() {
        if (instance == null) {
            instance = new SoundManager();
            Thread soundThread = new Thread(instance);
            soundThread.start();
        }
        return instance;
    }

    @Override
    public void run() {
        loadSounds();
    }

    private void loadSounds() {
        for (Map.Entry<SoundType, String> entry : soundPaths.entrySet()) {
            try {
                File soundFile = new File(entry.getValue());
                AudioInputStream audioIn = AudioSystem.getAudioInputStream(soundFile);
                Clip clip = AudioSystem.getClip();
                clip.open(audioIn);

                // שמירת הקליפ במפה
                clips.put(entry.getKey(), clip);

                // הגדרת ווליום התחלתי
                setClipVolume(clip, volume);
            } catch (Exception e) {
                System.err.println("Error loading sound: " + entry.getKey() + " - " + e.getMessage());
            }
        }
    }

    private void setClipVolume(Clip clip, float volume) {
        if (clip.isOpen()) {
            FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
            float dB = (float) (Math.log(volume) / Math.log(10.0) * 20.0);
            dB = Math.max(gainControl.getMinimum(), Math.min(gainControl.getMaximum(), dB));
            gainControl.setValue(dB);
        }
    }

    public Future<?> playSound(SoundType soundType) {
        if (isMuted) return null;

        return soundExecutor.submit(() -> {
            try {
                Clip clip = clips.get(soundType);
                if (clip != null) {
                    if (clip.isRunning()) {
                        clip.stop(); // עוצר את הסאונד אם הוא כבר מתנגן
                    }
                    clip.setFramePosition(0); // חזרה להתחלה
                    clip.start(); // מנגן
                }
            } catch (Exception e) {
                System.err.println("Error playing sound: " + soundType + " - " + e.getMessage());
            }
        });
//        if (isMuted) return null;
//
//        return soundExecutor.submit(() -> {
//            try {
//                Clip clip = clips.get(soundType);
//                if (clip != null) {
//                    clip.setFramePosition(0); // חזרה להתחלה
//                    clip.start();
//                }
//            } catch (Exception e) {
//                System.err.println("Error playing sound: " + soundType + " - " + e.getMessage());
//            }
//        });
    }

    public void stopSound(SoundType soundType) {
        Clip clip = clips.get(soundType);
        if (clip != null && clip.isRunning()) {
            clip.stop();
        }
    }

    public void stopAllSounds() {
        for (Clip clip : clips.values()) {
            if (clip.isRunning()) {
                clip.stop();
            }
        }
    }

    public void setVolume(float newVolume) {
        if (newVolume >= 0f && newVolume <= 1.0f) {
            this.volume = newVolume;
            for (Clip clip : clips.values()) {
                setClipVolume(clip, volume);
            }
        }
    }

    public void setMuted(boolean muted) {
        this.isMuted = muted;
        if (muted) {
            stopAllSounds();
        }
    }

    public void cleanup() {
        soundExecutor.shutdown();
        for (Clip clip : clips.values()) {
            clip.close();
        }
    }
}
